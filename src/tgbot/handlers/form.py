from aiogram import types, Dispatcher


from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext


from tgbot.misc.form_format import format
from tgbot.keyboards.reply import KB_SETTINGS, FORM_CONFIRM_KB_SETTINGS


class Form(StatesGroup):
    company_name = State()
    company_discription = State()
    responsibilities = State()
    requirements = State()
    terms = State()
    contact_link = State()


async def confirm_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            await message.answer(
                f"–ê–Ω–∫–µ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ <b>{data['company_name']}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
                reply_markup=KB_SETTINGS,
                parse_mode='html'
                )
            await state.finish()
        except:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.answer(
        '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=KB_SETTINGS
        )


async def company_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['company_name'] = message.text

    await Form.next()
    await message.answer(
        "–î–∞–ª–µ–µ –æ–ø–∏—à–∏—Ç–µ, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?"
    )


async def company_discription(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['company_discription'] = message.text

    await Form.next()
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫?"
    )


async def responsibilities(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['responsibilities'] = message.text

    await Form.next()
    await message.answer(
        "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –∫ —Ä–∞–±–æ–Ω–∏–∫—É?"
    )


async def requirements(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['requirements'] = message.text

    await Form.next()
    await message.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã –≤ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏"
    )


async def terms(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['terms'] = message.text

    await Form.next()
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –í–∞–º–∏ –∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç:"
    )


async def contact_link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact_link'] = message.text
    

    await message.answer(
        text=format(data),
        parse_mode='html',
        reply_markup=FORM_CONFIRM_KB_SETTINGS
        )


def register_form(dp: Dispatcher):
    dp.register_message_handler(confirm_handler, Text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ") ,state='*')
    dp.register_message_handler(cancel_handler, Text("–û—Ç–º–µ–Ω–∞üõë") ,state='*')
    dp.register_message_handler(company_name, state=Form.company_name)
    dp.register_message_handler(company_discription, state=Form.company_discription)
    dp.register_message_handler(responsibilities, state=Form.responsibilities)
    dp.register_message_handler(requirements, state=Form.requirements)
    dp.register_message_handler(terms, state=Form.terms)
    dp.register_message_handler(contact_link, state=Form.contact_link)
