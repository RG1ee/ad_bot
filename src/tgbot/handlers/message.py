from aiogram import types, dispatcher
from aiogram.dispatcher.filters import Text
from tgbot.database.db_sqlite import DataBaseHelper
from tgbot.keyboards.reply import cart_keyboard
from tgbot.misc.cart_fromat import cart

from tgbot.misc.help_data import help_information, default_page
from tgbot.keyboards.inline import help_pages_keyboard, services_keyboard
from tgbot.misc.decorators import check_user_status
from tgbot.misc.form_format_db import format_from_db


@check_user_status
async def profile(message: types.Message):
    form = format_from_db(message.from_user.id)

    await message.bot.send_message(
        message.chat.id,
        (
            f"{message.from_user.first_name} {message.from_user.last_name}\n" +
            "\n<u>–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞:</u>" +
            form
        )
    )


@check_user_status
async def help(message: types.Message):
    default_page()
    keyboard = help_pages_keyboard()
    await message.answer(
        text=help_information[0],
        reply_markup=keyboard
    )


@check_user_status
async def services(message: types.Message):
    keyboard = services_keyboard()
    cart = cart_keyboard()
    await message.answer(
        "<b>–£—Å–ª—É–≥–∏</b>\n\n" +
        "–î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç —É—Å–ª—É–≥",
        reply_markup=keyboard
    )

    await message.bot.send_message(
        message.chat.id,
        text="–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞, –ø–µ—Ä–µ–π–¥–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ–ø–ª–∞—Ç–∏",
        reply_markup=cart
    )


@check_user_status
async def show_cart(message: types.Message):
    db = DataBaseHelper()
    all_products_from_cart = db.select_products_from_cart(message.from_user.id)
    if len(all_products_from_cart) > 0:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton(
                text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                callback_data="clear_cart"
            ),
            types.InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏—Ç—å",
                callback_data="buy"
            )
        )

        await message.bot.send_message(
            message.chat.id,
            text=cart(all_products_from_cart),
            reply_markup=keyboard
        )
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(
            types.KeyboardButton(
                "–í—Å–µ —É—Å–ª—É–≥–∏üî•"
            )
        )
        await message.bot.send_message(
            message.chat.id,
            text="<b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n\n" +
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–ª–∏ –≤—ã–≥–æ–¥–Ω—ã–π –ø–∞–∫–µ—Ç",
            reply_markup=keyboard
        )


@check_user_status
async def incorrect_command(message: types.Message):
    await message.answer(
        text="–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
    )


def register_message(dp: dispatcher.Dispatcher):
    dp.register_message_handler(help, Text("–ü–æ–º–æ—â—åüõü"), state="*")
    dp.register_message_handler(profile, Text("–ú–æ—è –∞–Ω–∫–µ—Ç–∞üìÑ"), state="*")
    dp.register_message_handler(show_cart, Text("–ö–æ—Ä–∑–∏–Ω–∞üõí"))
    dp.register_message_handler(services, Text("–í—Å–µ —É—Å–ª—É–≥–∏üî•"), state="*")
    dp.register_message_handler(incorrect_command, state="*")
