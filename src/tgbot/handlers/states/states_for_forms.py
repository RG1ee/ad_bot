from aiogram import types, dispatcher
from aiogram.dispatcher.filters import Text
from settings.const import CHAT_ID

from tgbot.misc.form_format import format
from tgbot.keyboards.reply import admin_keyboard, cancel_keyboard, confirm_keyboard, main_keyboard
from tgbot.misc.states.states import FSMForm
from tgbot.database.db_sqlite import DataBaseHelper


async def confirm_handler(message: types.Message, state: dispatcher.FSMContext):
    async with state.proxy() as data:
        try:
            user_status = await message.bot.get_chat_member(
                chat_id=CHAT_ID,
                user_id=message.from_user.id
            )

            if user_status.status == types.ChatMemberStatus.CREATOR:
                keyboard = admin_keyboard(main_keyboard())
            else:
                keyboard = main_keyboard()
            data_to_save = {
                "company_name": data["company_name"],
                "company_discription": data["company_discription"],
                "responsibilities": data["responsibilities"],
                "requirements": data["requirements"],
                "terms": data["terms"],
                "contact_link": data["contact_link"],
                "user_forms": data["user_forms"],
            }
            db = DataBaseHelper()
            db.insert_from(data_to_save)
            await message.answer(
                f"–ê–Ω–∫–µ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ <b>{data['company_name']}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
                reply_markup=keyboard
            )
            await state.finish()
        except Exception:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


async def cancel_handler(message: types.Message, state: dispatcher.FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    await state.finish()

    user_status = await message.bot.get_chat_member(
        chat_id=CHAT_ID,
        user_id=message.from_user.id
    )

    if user_status.status == types.ChatMemberStatus.CREATOR:
        keyboard = admin_keyboard(main_keyboard())
    else:
        keyboard = main_keyboard()

    await message.answer(
        "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboard
    )


async def start_new_form(
    message: types.Message, state: dispatcher.FSMContext
) -> None:
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()

    keyboard = cancel_keyboard()
    await message.answer("–ù–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")
    await message.answer(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=keyboard
    )
    await FSMForm.first()


async def save_company_name(
    message: types.Message, state: dispatcher.FSMContext
) -> None:
    if not message.text:
        await message.bot.send_message(
            message.from_user.id,
            "–Ø –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –º–Ω–µ –ø–∏—à—É—Ç —Ç–µ–∫—Å—Ç–æ–ºüòâ"
        )
        return

    async with state.proxy() as data:
        data["company_name"] = message.text

        await FSMForm.next()
        await message.answer(
            "–î–∞–ª–µ–µ –æ–ø–∏—à–∏—Ç–µ, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?"
        )


async def company_discription(message: types.Message, state: dispatcher.FSMContext):
    if not message.text:
        await message.bot.send_message(
            message.from_user.id,
            "–Ø –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –º–Ω–µ –ø–∏—à—É—Ç —Ç–µ–∫—Å—Ç–æ–ºüòâ"
        )
        return

    async with state.proxy() as data:
        data["company_discription"] = message.text

    await FSMForm.next()
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫?"
    )


async def responsibilities(message: types.Message, state: dispatcher.FSMContext):
    if not message.text:
        await message.bot.send_message(
            message.from_user.id,
            "–Ø –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –º–Ω–µ –ø–∏—à—É—Ç —Ç–µ–∫—Å—Ç–æ–ºüòâ"
        )
        return

    async with state.proxy() as data:
        data["responsibilities"] = message.text.replace("\n", "\n‚Äî")

    await FSMForm.next()
    await message.answer(
        "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –∫ —Ä–∞–±–æ–Ω–∏–∫—É?"
    )


async def requirements(message: types.Message, state: dispatcher.FSMContext):
    if not message.text:
        await message.bot.send_message(
            message.from_user.id,
            "–Ø –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –º–Ω–µ –ø–∏—à—É—Ç —Ç–µ–∫—Å—Ç–æ–ºüòâ"
        )
        return

    async with state.proxy() as data:
        data["requirements"] = message.text.replace("\n", "\n‚Äî")

    await FSMForm.next()
    await message.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã –≤ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏"
    )


async def terms(message: types.Message, state: dispatcher.FSMContext):
    if not message.text:
        await message.bot.send_message(
            message.from_user.id,
            "–Ø –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –º–Ω–µ –ø–∏—à—É—Ç —Ç–µ–∫—Å—Ç–æ–ºüòâ"
        )
        return

    async with state.proxy() as data:
        data["terms"] = message.text.replace("\n", "\n‚Äî")

    await FSMForm.next()
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –í–∞–º–∏ –∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç:"
    )


async def contact_link(message: types.Message, state: dispatcher.FSMContext):
    if not message.text:
        await message.bot.send_message(
            message.from_user.id,
            "–Ø –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ –º–Ω–µ –ø–∏—à—É—Ç —Ç–µ–∫—Å—Ç–æ–ºüòâ"
        )
        return

    async with state.proxy() as data:
        keyboard = confirm_keyboard()
        try:
            if data["contact_link"] is not None:
                await message.answer(
                    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
                    reply_markup=keyboard
                    )
                return
        except Exception:
            data["contact_link"] = message.text
            data["user_forms"] = message.from_user.id

    await message.answer(
        text=format(data),
        reply_markup=keyboard
    )


def register_state_form(dp: dispatcher.Dispatcher):
    dp.register_message_handler(
        confirm_handler,
        Text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ"),
        state="*"
    )
    dp.register_message_handler(
        cancel_handler,
        Text("–û—Ç–º–µ–Ω–∏—Ç—åüõë"),
        state="*"
    )
    dp.register_message_handler(
        start_new_form, Text("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüìã"), state="*"
    )
    dp.register_message_handler(
        save_company_name,
        state=FSMForm.company_name,
        content_types="any"
    )
    dp.register_message_handler(
        company_discription,
        state=FSMForm.company_discription,
        content_types="any"
    )
    dp.register_message_handler(
        responsibilities,
        state=FSMForm.responsibilities,
        content_types="any"
    )
    dp.register_message_handler(
        requirements,
        state=FSMForm.requirements,
        content_types="any"
    )
    dp.register_message_handler(
        terms,
        state=FSMForm.terms,
        content_types="any"
    )
    dp.register_message_handler(
        contact_link,
        state=FSMForm.contact_link,
        content_types="any"
    )
